// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadMinimal returns the embedded CollectionSpec for minimal.
func loadMinimal() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_MinimalBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load minimal: %w", err)
	}

	return spec, err
}

// loadMinimalObjects loads minimal and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*minimalObjects
//	*minimalPrograms
//	*minimalMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadMinimalObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadMinimal()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// minimalSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type minimalSpecs struct {
	minimalProgramSpecs
	minimalMapSpecs
}

// minimalSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type minimalProgramSpecs struct {
	HandleTp *ebpf.ProgramSpec `ebpf:"handle_tp"`
}

// minimalMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type minimalMapSpecs struct {
}

// minimalObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadMinimalObjects or ebpf.CollectionSpec.LoadAndAssign.
type minimalObjects struct {
	minimalPrograms
	minimalMaps
}

func (o *minimalObjects) Close() error {
	return _MinimalClose(
		&o.minimalPrograms,
		&o.minimalMaps,
	)
}

// minimalMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadMinimalObjects or ebpf.CollectionSpec.LoadAndAssign.
type minimalMaps struct {
}

func (m *minimalMaps) Close() error {
	return _MinimalClose()
}

// minimalPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadMinimalObjects or ebpf.CollectionSpec.LoadAndAssign.
type minimalPrograms struct {
	HandleTp *ebpf.Program `ebpf:"handle_tp"`
}

func (p *minimalPrograms) Close() error {
	return _MinimalClose(
		p.HandleTp,
	)
}

func _MinimalClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed minimal_bpfel.o
var _MinimalBytes []byte
